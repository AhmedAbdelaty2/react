/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

const babel = require('babel-core');
const removeGetters = require('../transform-remove-getters');

function transform(input) {
  const result = babel.transform(input, {
    babelrc: false,
    presets: [],
    plugins: [removeGetters],
  });
  return result.code;
}

function compare(input, output) {
  const compiled = transform(input);
  expect(compiled).toEqual(output);
}

describe('remove-getters', () => {
  it('should remove getters', () => {
    compare(
      `const object = {
  get prop() {
    return variable;
  }
};`,
      `var object = {
  prop: variable
};`
    );
  });

  it('should not remove other methods or properties', () => {
    compare(
      `const object = {
  prop: 'foo',
  method() {
    return 'bar';
  }
};`,
      `var object = {
  prop: 'foo',
  method: function () {
    return 'bar';
  }
};`
    );
  });

  it('should throw when finding getters with a different syntax from the ones generated by Rollup', () => {
    expect(() => {
      transform(
        `const object = {
  get prop() {
    const foo = 'foo';
    return foo;
  }
};`
      );
    }).toThrow();
  });
});
